/*
 * Copyright (C) 2020. by perol_notsf, All rights reserved
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def dartEnvironmentVariables = [
        IS_GOOGLEPLAY: false,
];

if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                [(pair.first()): pair.last() == "true"]
            }
}
print("\n" +
        "______ _______   __ _____ ______\n" +
        "| ___ \\_   _\\ \\ / /|  ___|___  /\n" +
        "| |_/ / | |  \\ V / | |__    / / \n" +
        "|  __/  | |  /   \\ |  __|  / /  \n" +
        "| |    _| |_/ /^\\ \\| |___./ /___\n" +
        "\\_|    \\___/\\/   \\/\\____/\\_____/\n" +
        "                                \n" +
        "                                \n")
println("hey,IS_GOOGLEPLAY=${dartEnvironmentVariables.IS_GOOGLEPLAY}")
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}
def packageName = dartEnvironmentVariables.IS_GOOGLEPLAY ? 'com.perol.play.pixez' : 'com.perol.pixez'
println(packageName)
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 31

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }
    defaultConfig {
        applicationId packageName
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 10008060
        versionName "0.8.6 slogan"
        ndk { abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64' }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    signingConfigs {
        def keystorePwd = null
        def alias = null
        def pwd = null
        if (project.rootProject.file('local.properties').exists()) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            keystorePwd = properties.getProperty("RELEASE_STORE_PASSWORD")
            alias = properties.getProperty("RELEASE_KEY_ALIAS")
            pwd = properties.getProperty("RELEASE_KEY_PASSWORD")
        }
        release {
            storeFile file("config/release.keystore")
            storePassword keystorePwd != null ? keystorePwd : System.getenv("KEYSTORE_PASS")
            keyAlias alias != null ? alias : System.getenv("ALIAS_NAME")
            keyPassword pwd != null ? pwd : System.getenv("ALIAS_PASS")
        }
    }
    buildTypes {
        release {
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }

    android {
        splits {

            // Configures multiple APKs based on ABI.
            abi {

                // Enables building multiple APKs per ABI.
                enable true

                // By default all ABIs are included, so use reset() and include to specify that we only
                // want APKs for x86 and x86_64.

                // Resets the list of ABIs that Gradle should create APKs for to none.
                reset()

                // Specifies a list of ABIs that Gradle should create APKs for.
                include 'armeabi-v7a', 'arm64-v8a', 'x86_64'

                // Specifies that we do not want to also generate a universal APK that includes all ABIs.
                universalApk true
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation project(":weiss")
    implementation 'androidx.webkit:webkit:1.4.0'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    implementation "androidx.browser:browser:1.4.0"
    implementation('com.waynejo:androidndkgif:0.3.3')
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'com.google.android.play:core:1.10.3'
}
